const rl = @import("raylib");
const consts = @import("const.zig");
const fonts = @import("font.zig");
const ecs = @import("ecs");

// 640 pixels
const MAP_HEIGHT = consts.MAP_HEIGHT;
const MAP_WIDTH = consts.MAP_HEIGHT;
const TILE_SIZE = consts.TILE_SIZE;

pub const MapData: [MAP_HEIGHT][MAP_WIDTH]u8 = .{
    .{ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '^', '^', '^', '.', '.', '~', '~', '~', '~', '~', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '^', '^', '^', '.', '.', '~', '~', '~', '~', '~', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '#', '#', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '#', '#', '#', '#', '#', '#', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '~', '~', '~', '~', '~', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '~', '~', '~', '~', '~', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '^', '^', '^', '^', '^', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '^', '^', '^', '^', '^', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' },
};

pub const TileMap = struct {
    data: [MAP_HEIGHT][MAP_WIDTH]u8,
    font: fonts.Font,

    pub fn isObstacle(self: *TileMap, y: f32, x: f32) bool {
        return self.checkTile('#', @intFromFloat(y), @intFromFloat(x));
    }

    pub fn checkTile(self: *TileMap, tile: u8, y: usize, x: usize) bool {
        return self.data[y][x] == tile;
    }
};
