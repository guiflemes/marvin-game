const rl = @import("raylib");
const core = @import("../core.zig");
const ecs = @import("ecs");

// 640 pixels
const MAP_HEIGHT = core.MAP_HEIGHT;
const MAP_WIDTH = core.MAP_HEIGHT;
const TILE_SIZE = core.TILE_SIZE;

pub const MapData: [MAP_HEIGHT][MAP_WIDTH]u8 = .{
    .{ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '^', '^', '^', '.', '.', '~', '~', '~', '~', '~', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '^', '^', '^', '.', '.', '~', '~', '~', '~', '~', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '#', '#', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '#', '#', '#', '#', '#', '#', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '~', '~', '~', '~', '~', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '~', '~', '~', '~', '~', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '^', '^', '^', '^', '^', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '^', '^', '^', '^', '^', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', 'M', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#' },
    .{ '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' },
};

pub const TileMap = struct {
    data: [MAP_HEIGHT][MAP_WIDTH]u8,
    font: core.Font,

    pub fn isObstacle(self: *TileMap, y: f32, x: f32) bool {
        return self.checkTile('#', @intFromFloat(y), @intFromFloat(x));
    }

    pub fn isEnemy(self: *TileMap, y: f32, x: f32) bool {
        return self.checkTile('M', @intFromFloat(y), @intFromFloat(x));
    }

    pub fn checkTile(self: *TileMap, tile: u8, y: usize, x: usize) bool {
        return self.data[y][x] == tile;
    }
};
